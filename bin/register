#!/usr/bin/env node

'use strict'

function register(options, on_register) {
  if (!(options.email &&
        options.nickname &&
        options.private_key &&
        options.webhook_scheme &&
        options.webhook_hostname &&
        options.webhook_port &&
        options.webhook_path &&
        options.actions_path)) {
    return on_register(new Error('missing required arguments'))
  }

  var plaintext_proof = '' + Date.now()

  try {
    var public_key = options.private_key.toPublicPem('utf8')
    var signed_proof = options.private_key.hashAndSign(
      'sha256',
      plaintext_proof,
      'utf8',
      'base64',
      false
    )
  } catch (e) {
    return on_register(e)
  }

  var webhook_url = (
    options.webhook_scheme +
    options.webhook_hostname +
    (!options.webhook_port || options.webhook_port === 80 || options.webhook_port === '80' ? '' : ':' + options.webhook_port) +
    options.webhook_path
  )

  var actions_url = (
    options.webhook_scheme +
    options.webhook_hostname +
    (!options.webhook_port || options.webhook_port === 80 || options.webhook_port === '80' ? '' : ':' + options.webhook_port) +
    options.actions_path
  )

  http.request({
    host: 'staging.api.lifekey.cnsnt.io',
    path: '/management/register',
    method: 'post',
    headers: {'content-type': 'application/json'}
  }).on('response', function(res) {
    var r = ''
    res.on('data', function(data) {
      r += data
    }).on('end', function() {
      try {
        r = JSON.parse(r)
      } catch (e) {
        return on_register(e)
      }
      if (r.error) return on_register(new Error(r.message))
      return on_register(null, r.body)
    })
  }).on('error', on_register).end(
    JSON.stringify({
      email: options.email,
      nickname: options.nickname,
      webhook_url: webhook_url,
      actions_url: actions_url,
      public_key_algorithm: 'rsa',
      public_key: public_key,
      plaintext_proof: plaintext_proof,
      signed_proof: signed_proof
    })
  )
}

var fs = require('fs')
var http = require('http')

try {
  var args = JSON.parse(process.argv[2])
} catch (e) {
  console.log(e)
  process.exit(1)
}

var ursa = require('ursa')
args.private_key = ursa.generatePrivateKey(4096)

register(args, function(err, res) {
  if (err) {
    console.log('error while attemtping to register', err)
    process.exit(1)
  }
  
  // log the credentials
  console.log(
    JSON.stringify({
      USER_ID: res.id,
      SIGNING_KEY_PEM: args.private_key.toPrivatePem('utf8')
    }, '\t', 2)
  )

  process.exit(0)
})
#!/usr/bin/env node

var http = require('http')
var fs = require('fs')

var email = process.argv[2]
var nickname = process.argv[3]
var hook_scheme = process.argv[4]
var hook_hostname = process.argv[5]
var hook_port = process.argv[6]
var hook_path = process.argv[7]

if (!(email &&
      nickname &&
      hook_scheme &&
      hook_hostname &&
      hook_port &&
      hook_path)) {
  console.log('please provide')
  console.log('  - your email address')
  console.log('  - your desired nickname')
  console.log('  - your webhook scheme')
  console.log('  - your webhook host')
  console.log('  - your webhook port')
  console.log('  - your webhook path')
  console.log('exiting...')
  process.exit(1)
}

var ursa = require('ursa')
var private_key = ursa.generatePrivateKey(4096)

function register(options, on_register) {
  
  function sign(plain, private_key) {
    return private_key.hashAndSign(
      'sha256',
      plain,
      'utf8',
      'base64',
      false
    )
  }

  function parse_res(res, on_parsed) {
    var r = ''
    res.on('data', function(data) {
      r += data
    }).on('end', function() {
      try {
        r = JSON.parse(r)
      } catch (e) {
        return on_parsed(e)
      }
      if (r.error) return on_parsed(new Error(r.message))
      return on_parsed(null, r)
    })
  }

  function request(method, path, headers, body, on_send) {
    var h = {'content-type': 'application/json'}
    if (headers) {
      Object.keys(headers).forEach(function(k) {
        h[k] = headers[k]
      })
    }
    return http.request({
      host: 'staging.api.lifekey.cnsnt.io',
      path: path,
      method: method,
      headers: h
    }).on('response', function(res) {
      parse_res(res, function(err, r) {
      if (err) return on_send(err)
      return on_send(null, r.body)
    })
    }).on('error', on_send).end(body || null)
  }
  
  if (!(options.email &&
        options.nickname &&
        options.private_key &&
        options.scheme &&
        options.hostname &&
        options.port &&
        options.webhook_path)) {
    return on_register(new Error('missing required arguments'))
  }

  var plaintext_proof = '' + Date.now()

  try {
    var public_key = options.private_key.toPublicPem('utf8')
    var signed_proof = sign(plaintext_proof, options.private_key)
  } catch (e) {
    return on_register(e)
  }

  var webhook_url = (
    options.scheme +
    options.hostname +
    (!options.port || options.port === 80 || options.port === '80' ? '' : ':' + options.port) +
    options.webhook_path
  )

  request(
    'post',
    '/management/register',
    {},
    JSON.stringify({
      email: options.email,
      nickname: options.nickname,
      webhook_url: webhook_url,
      public_key_algorithm: 'rsa',
      public_key: public_key,
      plaintext_proof: plaintext_proof,
      signed_proof: signed_proof
    }),
    on_register
  )
}

register({
  email: email,
  nickname: nickname,
  private_key: private_key,
  scheme: hook_scheme,
  hostname: hook_hostname,
  port: hook_port,
  webhook_path: hook_path
}, function(err, res) {
  if (err) {
    console.log('error while attemtping to register', err)
    process.exit(1)
  }
  
  console.log('user registration successful!')
  console.log('your user credentials are displayed below...')
  
  console.log({
    USER_ID: res.id,
    SIGNING_KEY_PEM: private_key.toPrivatePem('utf8')
  })

  process.exit(0)
})